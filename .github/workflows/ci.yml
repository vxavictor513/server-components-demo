# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
name: CI

on:
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  buildAndDeploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["credentials.js"]'
      env:
        DB_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        
    - name: Docker Login
      uses: docker/login-action@v1.8.0
      with:
        registry: ghcr.io
        username: vxavictor513
        password: ${{ secrets.GHCR_TOKEN }}
        logout: true  

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "ghcr.io/vxavictor513/server-components-demo" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "ghcr.io/vxavictor513/server-components-demo:latest"

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # KUBE_CONFIG_DATA is a base64-encoded kubeconfig file with credentials for Kubernetes to access the cluster. You can get it by running the following command:
    # cat $HOME/.kube/config | base64
    - name: Helm deploy
      uses: koslib/helm-eks-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        command: helm upgrade -i server-components-demo ./helm

    - name: Verify deployment
      uses: qazz92/kubectl@1.0.3
      env:
        kube_confg_data: ${{ secrets.KUBE_CONFIG_DATA }}
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ secrets.AWS_DEFAULT_REGION }}
      with:
        args: rollout status deployment/client
